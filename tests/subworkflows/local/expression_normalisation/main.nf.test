nextflow_workflow {

    name "Test Workflow EXPRESSION_NORMALISATION"
    script "subworkflows/local/expression_normalisation/main.nf"
    workflow "EXPRESSION_NORMALISATION"
    tag "subworkflow_expression_normalisation"
    tag "subworkflow"

    test("DESeq2 Normalisation") {

        when {
            workflow {
                """
                rnaseq_raw_file = file( '$projectDir/tests/test_data/custom_datasets/rnaseq.raw.csv', checkIfExists: true )
                rnaseq_raw_design_file = file( '$projectDir/tests/test_data/custom_datasets/rnaseq.raw.design.csv', checkIfExists: true )
                microarray_normalised_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.csv', checkIfExists: true )
                microarray_normalised_design_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.design.csv', checkIfExists: true )
                ch_datasets = Channel.of(
                    [ [normalised: false, design: rnaseq_raw_design_file, dataset: "rnaseq_raw", platform: "rnaseq"], rnaseq_raw_file],
                    [ [normalised: true, design: microarray_normalised_design_file, dataset: "microarray_normalised", platform: "microarray"], microarray_normalised_file ]
                )
                normalisation_method = "deseq2"
                input[0] = ch_datasets
                input[1] = normalisation_method
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("EdgeR Normalisation") {

        when {
            workflow {
                """
                rnaseq_raw_file = file( '$projectDir/tests/test_data/custom_datasets/rnaseq.raw.csv', checkIfExists: true )
                rnaseq_raw_design_file = file( '$projectDir/tests/test_data/custom_datasets/rnaseq.raw.design.csv', checkIfExists: true )
                microarray_normalised_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.csv', checkIfExists: true )
                microarray_normalised_design_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.design.csv', checkIfExists: true )
                ch_datasets = Channel.of(
                    [ [normalised: false, design: rnaseq_raw_design_file, dataset: "rnaseq_raw", platform: "rnaseq"], rnaseq_raw_file],
                    [ [normalised: true, design: microarray_normalised_design_file, dataset: "microarray_normalised", platform: "microarray"], microarray_normalised_file ]
                )
                normalisation_method = "edger"
                input[0] = ch_datasets
                input[1] = normalisation_method
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("No rnaseq normalisation") {

        when {
            workflow {
                """
                microarray_normalised_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.csv', checkIfExists: true )
                microarray_normalised_design_file = file( '$projectDir/tests/test_data/custom_datasets/microarray.normalised.design.csv', checkIfExists: true )
                ch_datasets = Channel.of(
                    [ [normalised: true, design: microarray_normalised_design_file, dataset: "microarray_normalised", platform: "microarray"], microarray_normalised_file ]
                )
                normalisation_method = "deseq2"
                input[0] = ch_datasets
                input[1] = normalisation_method
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
